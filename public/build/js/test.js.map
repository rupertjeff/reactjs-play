{"version":3,"sources":["test.js"],"names":[],"mappingsfile":"test.js","sourcesContent":["var baseUrl = [\n    window.baseUrl,\n    'api'\n].map(function (value) {\n    return value\n        .replace(/^\\/+/, '')\n        .replace(/\\/+$/, '');\n}).join('/');\n\nwindow.axios.defaults.headers.common['Accept'] = 'application/json';\n\nvar TaskService = (function (server, baseUrl) {\n    server.interceptors.response.use((response) => {\n        // process response from server here if need be?\n\n        return Promise.resolve(response);\n    }, (error) => {\n        return Promise.reject(error);\n    });\n\n    function getTasks() {\n        return server.get(baseUrl);\n    }\n\n    function getTask(id) {\n        return server.get([baseUrl, id].join('/'));\n    }\n\n    function saveTask(task) {\n        if (task.id) {\n            return server.put([baseUrl, task.id].join('/'), task);\n        }\n\n        return server.post(baseUrl, task);\n    }\n\n    function deleteTask(task) {\n        if (+task !== task) {\n            task = task.id;\n        }\n\n        return server.delete([baseUrl, task].join('/'));\n    }\n\n    return {\n        all: getTasks,\n        get: getTask,\n        save: saveTask,\n        delete: deleteTask\n    };\n})(window.axios.create(), [baseUrl, 'tasks'].join('/'));\n\nvar Task = React.createClass({\n    handleStatusChange: function (e) {\n        this.props.handleTaskStatusChange(this.props.id, !this.props.complete);\n    },\n    handleDelete: function (e) {\n        this.props.handleTaskDelete(this.props.id);\n    },\n    render: function () {\n        return (\n            <li className=\"task-list-task\">\n                <label className=\"task-list-task-name\">\n                    <input type=\"checkbox\" className=\"task-list-task-checkbox\" value=\"complete\" checked={this.props.complete} onChange={this.handleStatusChange}/>\n                    <span className=\"task-list-task-name-value\">{this.props.task}</span>\n                </label>\n                <button type=\"button\" onClick={this.handleDelete}>&times;</button>\n            </li>\n        );\n    }\n});\n\nvar TaskList = React.createClass({\n    render: function () {\n        var taskNodes = this.props.tasks.map((task) => {\n            var key = +Date.now();\n            if (task.id) {\n                key = task.id;\n            }\n            return (\n                <Task key={key} {...task} handleTaskStatusChange={this.props.handleTaskStatusChange} handleTaskDelete={this.props.handleTaskDelete}/>\n            );\n        });\n\n        return (\n            <div className=\"todo-list-listing\">\n                <h2>Tasks</h2>\n                <ul>\n                    {taskNodes}\n                </ul>\n            </div>\n        );\n    }\n});\n\nvar TaskForm = React.createClass({\n    getInitialState: function () {\n        return {\n            task: ''\n        };\n    },\n    isFormValid: function () {\n        return this.state.task.trim();\n    },\n    handleTaskChange: function (e) {\n        this.setState({\n            task: e.target.value\n        });\n    },\n    handleSubmit: function (e) {\n        e.preventDefault();\n\n        if (!this.isFormValid()) {\n            return;\n        }\n\n        this.props.handleTaskSubmit({\n            task: this.state.task.trim()\n        });\n\n        this.setState({\n            task: ''\n        });\n    },\n    render: function () {\n        return (\n            <form class=\"todo-list-form\" onSubmit={this.handleSubmit}>\n                <h2>Add Task</h2>\n                <div className=\"form-group\">\n                    <label htmlFor=\"task-name\">Task Name</label>\n                    <input type=\"text\" id=\"task-name\" name=\"task[name]\" value={this.state.task} onChange={this.handleTaskChange}/>\n                </div>\n                <div className=\"form-group form-actions\">\n                    <button type=\"submit\">Add</button>\n                </div>\n            </form>\n        );\n    }\n});\n\nvar TodoList = React.createClass({\n    getInitialState: function () {\n        return {\n            tasks: []\n        };\n    },\n    componentDidMount: function () {\n        this.loadTasks();\n    },\n    handleCreateTask: function (task) {\n        this.setState({\n            tasks: this.state.tasks.concat([task])\n        });\n        TaskService.save(task).then(() => this.loadTasks());\n    },\n    handleTaskStatusChange: function (id, newStatus) {\n        let task = this.state.tasks.filter((element) => id === element.id).shift();\n\n        task.complete = newStatus;\n\n        this.setState({\n            tasks: this.state.tasks.map((value) => {\n                if (id === value.id) {\n                    return task;\n                }\n\n                return value;\n            })\n        });\n\n        TaskService.save(task).then(() => this.loadTasks());\n    },\n    handleTaskDelete: function (id) {\n        let tasks = this.state.tasks.filter((element) => id !== element.id);\n\n        this.setState({\n            tasks: tasks\n        });\n\n        TaskService.delete(id);\n    },\n    loadTasks: function () {\n        TaskService.all().then((response) => {\n            this.setState({\n                tasks: response.data.data\n            });\n        }).catch((error) => {\n        });\n    },\n    render: function () {\n        return (\n            <div className=\"todo-list\">\n                <TaskList tasks={this.state.tasks} handleTaskStatusChange={this.handleTaskStatusChange} handleTaskDelete={this.handleTaskDelete}/>\n                <TaskForm handleTaskSubmit={this.handleCreateTask}/>\n            </div>\n        );\n    }\n});\n\nReactDOM.render(\n    <TodoList/>,\n    document.getElementById('todo-list')\n);\n"],"sourceRoot":"/source/"}